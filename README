hgssh4
-------

A python script to control ssh access to mercurial repositories.

modified from hg-ssh (http://www.selenic.com/repo/hg-stable/raw-file/tip/contrib/hg-ssh)
and hgssh2.py (https://github.com/dengzhp/hgssh2)
and hgssh3.py (https://bitbucket.org/painfulcranium/hgssh3)

See https://bitbucket.org/forbjok/hgssh4 for more information.

How to use
-----------

These installation instructions were written for Ubuntu, but it should be more or less the same
in any Debian-based distro.

1. Create a new user:
	$ sudo adduser --system --shell /bin/bash --group --disabled-password hg

2. Switch to the user:
	$ sudo su - hg

2. Clone the hgssh4 repository:
	$ hg clone https://forbjok@bitbucket.org/forbjok/hgssh4

3. Run the setup script:
	$ hgssh4/setup-hgssh4.py
	
	This will create a configuration repository in ~/repositories/hgssh4-admin
	and pre-populate it with basic configuration files.

4. In ~/repositories/hgssh4-admin/keys which should be empty except for a blank dummy file,
	create a file <username>.pub, where <username> is the username you want to be represented by
	in the HGSSH4 configuration files, containing your SSH public key.
	
	If you don't have one, it can be generated using ssh-keygen on most *nix systems or PuTTYgen
	on windows.

5. Open up ~/repositories/hgssh4-admin/main.conf in the editor of your choice
	and add your <username> to the admin group:
	
	[groups]
	admins = <username>
	
	This will give your user full access to all repositories by default. (but of course, that can be changed)

6. Commit the changes to the admin repository:
	$ cd ~/repositories/hgssh4-admin/
	$ hg commit -A -m "added <username>" -u <username>
	
	This will automatically regenerate your ~/.ssh/authorized_keys file to contain the key placed in the keys directory.

7. You should now be able to clone the admin repository remotely by running
	$ hg clone ssh://hg@<server-ip>/hgssh4-admin

8. Add more users (if needed).
	Create <name>.pub files for each user you want to grant access in the keys/ subdirectory of the configuration repository,
	containing their pubkey, and/or edit the config files to specify groups or permissions.
	
	When done, commit all new files and push it back to the server:
	$ hg commit -A -m "added more users" -u <username>
	$ hg push
	
	Repeat this any time you want to change the configuration or add/remove user keys.

Configuration format:
---------------------

main.conf
---------

[groups]
# Contains an entry for each group - by default only 'admin'.
# Each group's value should be a username, or a comma-separated list of usernames of its members.
admins = <username>

[system]
# init should be a list of usernames and/or groups (groups must be prefixed by @ to specify that they are referring to a group)
#	of users who should be allowed to remotely create new repositories
init = @admins

[defaults]
# The [defaults] section contains default values that will be used as a fallback for repositories not
#	specified in the repositories.conf file.
# location specifies the default location of repositories that do not specify their own location.
#	$r is a placeholder that will be replaced with the name of the repository
location = /home/tord/repositories/$r
# Following is a list of usernames or groups (still prefixed by @) and their permissions (r = read-only, rw = read/write)
@admins = rw


repositories.conf
-----------------

Should contain a section for each repository you want to assign permissions to.
The format of each repository section is exactly the same as the [defaults] section in main.conf.